%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(test_gen_thrift).

-export([namespace/0]).
-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([struct_new/2]).
-export([struct_get/1]).
-export([struct_get_type/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([namespace/0]).
-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).

-export_type([enum_info/0]).
-export_type([struct_info/0]).

-export_type([
    'MessageAttachments'/0
]).
-export_type([
    'MessageAttachment'/0,
    'Message'/0,
    'MailBody'/0,
    'MessageMail'/0
]).
-export_type([
    'InvalidRequest'/0
]).

-type namespace() :: 'message_sender'.

%%
%% typedefs
%%
-type typedef_name() ::
    'MessageAttachments'.

-type 'MessageAttachments'() :: ['MessageAttachment'()].

%%
%% enums
%%
-type enum_name() :: none().

%%
%% structs, unions and exceptions
%%
-type struct_name() ::
    'MessageAttachment' |
    'Message' |
    'MailBody' |
    'MessageMail'.

-type exception_name() ::
    'InvalidRequest'.

%% struct 'MessageAttachment'
-type 'MessageAttachment'() :: #{
    '$struct' := 'MessageAttachment',
    'name' := binary(),
    'mime_type' => binary(),
    'data' := binary()
}.

%% union 'Message'
-type 'Message'() ::
    {'message_mail', 'MessageMail'()}.

%% struct 'MailBody'
-type 'MailBody'() :: #{
    '$struct' := 'MailBody',
    'content_type' => binary(),
    'text' := binary()
}.

%% struct 'MessageMail'
-type 'MessageMail'() :: #{
    '$struct' := 'MessageMail',
    'mail_body' := test_gen_thrift:'MailBody'(),
    'subject' => binary(),
    'from_email' := binary(),
    'to_emails' := [binary()],
    'attachments' => test_gen_thrift:'MessageAttachments'()
}.

%% exception 'InvalidRequest'
-type 'InvalidRequest'() :: #{
    '$struct' := 'InvalidRequest'
}.

%%
%% services and functions
%%
-type service_name() ::
    'MessageSender'.

-type function_name() ::
    'MessageSender_service_functions'().

-type 'MessageSender_service_functions'() ::
    'send'.

-export_type(['MessageSender_service_functions'/0]).


-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref() :: {module(), atom()}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
    {enum, type_ref()} |
    {struct, struct_flavour(), type_ref()} |
    {list, field_type()} |
    {set, field_type()} |
    {map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() :: none().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [typedef_name()].

typedefs() ->
    [
        'MessageAttachments'
    ].

-spec enums() -> [].

enums() ->
    [].

-spec structs() -> [struct_name()].

structs() ->
    [
        'MessageAttachment',
        'Message',
        'MailBody',
        'MessageMail'
    ].

-spec services() -> [service_name()].

services() ->
    [
        'MessageSender'
    ].

-spec namespace() -> namespace().

namespace() ->
    'message_sender'.

-spec typedef_info(typedef_name()) -> field_type() | no_return().

typedef_info('MessageAttachments') ->
    {list, {struct, struct, {test_gen_thrift, 'MessageAttachment'}}};

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(_) -> no_return().

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name() | exception_name()) -> struct_info() | no_return().

struct_info('MessageAttachment') ->
    {struct, struct, [
        {1, required, string, 'name', undefined},
        {2, optional, string, 'mime_type', undefined},
        {3, required, string, 'data', undefined}
    ]};

struct_info('Message') ->
    {struct, union, [
        {1, optional, {struct, struct, {test_gen_thrift, 'MessageMail'}}, 'message_mail', undefined}
    ]};

struct_info('MailBody') ->
    {struct, struct, [
        {1, optional, string, 'content_type', undefined},
        {2, required, string, 'text', undefined}
    ]};

struct_info('MessageMail') ->
    {struct, struct, [
        {1, required, {struct, struct, {test_gen_thrift, 'MailBody'}}, 'mail_body', undefined},
        {2, optional, string, 'subject', undefined},
        {3, required, string, 'from_email', undefined},
        {4, required, {list, string}, 'to_emails', undefined},
        {5, optional, {list, {struct, struct, {test_gen_thrift, 'MessageAttachment'}}}, 'attachments', undefined}
    ]};

struct_info('InvalidRequest') ->
    {struct, exception, []};

struct_info(_) -> erlang:error(badarg).

-spec struct_new(struct_name() | exception_name(), map()) -> map() | no_return().

struct_new('MessageAttachment', #{'name' := Arg_name, 'data' := Arg_data}) ->
    #{
        '$struct' => 'MessageAttachment',
        'name' => Arg_name,
        'data' => Arg_data
    };

struct_new('Message', #{}) ->
    #{
        '$struct' => 'Message'
    };

struct_new('MailBody', #{'text' := Arg_text}) ->
    #{
        '$struct' => 'MailBody',
        'text' => Arg_text
    };

struct_new('MessageMail', #{'mail_body' := Arg_mail_body, 'from_email' := Arg_from_email, 'to_emails' := Arg_to_emails}) ->
    #{
        '$struct' => 'MessageMail',
        'mail_body' => Arg_mail_body,
        'from_email' => Arg_from_email,
        'to_emails' => Arg_to_emails
    };

struct_new('InvalidRequest', _) ->
    #{
        '$struct' => 'InvalidRequest'
    };

struct_new(_, _) -> error(badarg).

-spec struct_get(map()) -> map() | no_return().

struct_get(#{'$struct' := 'MessageAttachment'} = Map) ->
    maps:remove('$struct', Map);

struct_get(#{'$struct' := 'Message'} = Map) ->
    maps:remove('$struct', Map);

struct_get(#{'$struct' := 'MailBody'} = Map) ->
    maps:remove('$struct', Map);

struct_get(#{'$struct' := 'MessageMail'} = Map) ->
    maps:remove('$struct', Map);

struct_get(#{'$struct' := 'InvalidRequest'} = Map) ->
    maps:remove('$struct', Map);

struct_get(_) -> error(badarg).

-spec struct_get_type(map()) -> atom() | no_return().

struct_get_type(#{'$struct' := 'MessageAttachment'}) ->
    'MessageAttachment';

struct_get_type(#{'$struct' := 'Message'}) ->
    'Message';

struct_get_type(#{'$struct' := 'MailBody'}) ->
    'MailBody';

struct_get_type(#{'$struct' := 'MessageMail'}) ->
    'MessageMail';

struct_get_type(#{'$struct' := 'InvalidRequest'}) ->
    'InvalidRequest';

struct_get_type(_) -> error(badarg).

-spec functions(service_name()) -> [function_name()] | no_return().

functions('MessageSender') ->
    [
        'send'
    ];

functions(_) -> error(badarg).

-spec function_info(service_name(), function_name(), params_type | reply_type | exceptions) ->
    struct_info() | no_return().

function_info('MessageSender', 'send', params_type) ->
    {struct, struct, [
        {1, undefined, {struct, union, {test_gen_thrift, 'Message'}}, 'message', undefined}
    ]};
function_info('MessageSender', 'send', reply_type) ->
    {struct, struct, []};
function_info('MessageSender', 'send', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {test_gen_thrift, 'InvalidRequest'}}, 'ex1', undefined}
    ]};

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).
